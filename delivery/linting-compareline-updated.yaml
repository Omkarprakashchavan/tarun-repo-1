#!/usr/bin/env python3
import re
import sys

diff_file = 'git-diff.txt'
lint_logfile = 'super-linter.log'
file_lines_dict = {}
words = ['^diff', '^\+\s+', '^\-\s+', '^\+\d+', '^\-\d+', '^\-+', '^\++']
dictname = ''

f = open('git-diff.txt', 'r')
print('------------------- git-diff.txt ------------------- ')
file_contents = f.read()
print (file_contents)
f.close()

h = open('lint-output.log', 'r')
print('------------------- lint-output.log ------------------- ')
h_file_contents = h.read()
print (h_file_contents)
h.close()

def line_starts_with_any_word(line, words):
    return any(re.match(word, line) for word in words)

with open(diff_file, 'r', encoding="utf8") as file:
    for line_number, line in enumerate(file, start=1):
        line = line.strip()
        if line_starts_with_any_word(line, words):
            if line.startswith('diff'):
                dictname = (line.split(" ")[-1])[2:]
                cleaned_line = dictname.strip().replace('/github/workspace/', '')
                if dictname not in file_lines_dict.keys():
                    file_lines_dict[dictname] = []
            else:
                line_num = re.findall(r'^[+-]\s*(\d+)', line)
                for ln in line_num:
                    file_lines_dict[dictname].append(ln)

error_dict = {key: [] for key in file_lines_dict}
unique_file_lines_dict = {key: list(set(value)) for key, value in file_lines_dict.items()}
print('------------------- error_dict ------------------- ')
print(error_dict)
print('------------------- unique_file_lines_dict ------------------- ')
print(unique_file_lines_dict)

with open(lint_logfile, 'r', encoding="utf8") as file:
    for line in file:
        if "line " in line:
            match = re.search(r'In (.+) line (\d+):', line)
            if match:
                file_path = match.group(1)
                line_number = match.group(2)
                file_path = file_path.strip().replace('/github/workspace/', '')
                if file_path in error_dict:
                    if line_number not in error_dict[file_path]:
                        error_dict[file_path].append(line_number)

output_dict = {}
for key in error_dict.keys():
    if key in file_lines_dict:
        common_values = set(error_dict[key]) & set(file_lines_dict[key])
        if common_values:
            output_dict[key] = common_values
            print(f"'{key} having linting error on line': {common_values}")
print('------------------- output_dict ------------------- ')
print(output_dict)
any_non_empty = any(errors for errors in output_dict.values())
if any_non_empty:
    sys.exit(1)
